{"mappings":"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","sources":["sound.js"],"sourcesContent":["const WIDTH = 1500;\r\nconst HEIGHT = 1500;\r\nconst canvas = document.querySelector('canvas');\r\nconst ctx = canvas.getContext('2d');\r\ncanvas.width = WIDTH;\r\ncanvas.height = HEIGHT;\r\nlet analyzer;\r\nlet bufferLength;\r\n\r\nfunction handleError(err) {\r\n  console.log('You must give access to your mic in order to proceed');\r\n}\r\n\r\nasync function getAudio() {\r\n  const stream = await navigator.mediaDevices\r\n    .getUserMedia({ audio: true })\r\n    .catch(handleError);\r\n  const audioCtx = new AudioContext();\r\n  analyzer = audioCtx.createAnalyser();\r\n  const source = audioCtx.createMediaStreamSource(stream);\r\n  source.connect(analyzer);\r\n  // How much data should we collect\r\n  analyzer.fftSize = 2 ** 10;\r\n  // pull the data off the audio\r\n  // how many pieces of data are there?!?\r\n  bufferLength = analyzer.frequencyBinCount;\r\n  const timeData = new Uint8Array(bufferLength);\r\n  const frequencyData = new Uint8Array(bufferLength);\r\n  drawTimeData(timeData);\r\n  drawFrequency(frequencyData);\r\n}\r\n\r\nfunction drawTimeData(timeData) {\r\n  // inject the time data into our timeData array\r\n  analyzer.getByteTimeDomainData(timeData);\r\n  // now that we have the data, lets turn it into something visual\r\n  // 1. Clear the canvas TODO\r\n  ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n  // 2. setup some canvas drawing\r\n  ctx.lineWidth = 10;\r\n  ctx.strokeStyle = '#ffc600';\r\n  ctx.beginPath();\r\n  const sliceWidth = WIDTH / bufferLength;\r\n  let x = 0;\r\n  timeData.forEach((data, i) => {\r\n    const v = data / 128;\r\n    const y = (v * HEIGHT) / 2;\r\n    // draw our lines\r\n    if (i === 0) {\r\n      ctx.moveTo(x, y);\r\n    } else {\r\n      ctx.lineTo(x, y);\r\n    }\r\n    x += sliceWidth;\r\n  });\r\n\r\n  ctx.stroke();\r\n\r\n  // call itself as soon as possible\r\n  requestAnimationFrame(() => drawTimeData(timeData));\r\n}\r\n\r\nfunction drawFrequency(frequencyData) {\r\n  // get the frequency data into our frequencyData array\r\n  analyzer.getByteFrequencyData(frequencyData);\r\n  // figure out the bar width\r\n  const barWidth = (WIDTH / bufferLength) * 2.5;\r\n  console.log(barWidth);\r\n  let x = 0;\r\n  frequencyData.forEach(amount => {\r\n    // 0 to 255\r\n    const percent = amount / 255;\r\n    const [h, s, l] = [360 / (percent * 360), 0.5, 0.75];\r\n    const barHeight = (HEIGHT * percent) / 2;\r\n    // TODO: Convert the color to HSL\r\n    ctx.fillStyle = 'red';\r\n    ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\r\n    x += barWidth + 2;\r\n  });\r\n  requestAnimationFrame(() => drawFrequency(frequencyData));\r\n}\r\n\r\ngetAudio();\r\n"],"names":[],"version":3,"file":"index.26d90555.js.map","sourceRoot":"/__parcel_source_root/"}